// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(uuid()) @db.Uuid
  email                   String     @unique
  name                    String
  password                String
  is_verified             Boolean    @default(false)
  verify_token            String?
  expiration_verify_token DateTime?
  created_at              DateTime   @default(now())
  updated_at              DateTime   @default(now())
  comments                Comments[]
  wishlists               Wishlist?
  cart                    Cart?
}

model Products {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  description  String
  slug         String
  price        Float
  currency     String
  discount     Float
  info         Json
  cpu_info     Json
  in_stock     Int            @default(0)
  rating       Float
  comments     Comments[]
  brand        Brand          @relation(fields: [brandId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  brandId      String         @db.Uuid
  categoryId   String         @db.Uuid
  images       String[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
}

model Cart {
  id     String     @id @default(uuid()) @db.Uuid
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique @db.Uuid
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid()) @db.Uuid
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.Uuid
  product   Products @relation(fields: [productId], references: [id])
  productId String   @db.Uuid
  quantity  Int
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  products    Products[]
}

model Brand {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  products    Products[]
}

model Comments {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String
  rating      Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  author      User      @relation(fields: [author_id], references: [id])
  author_id   String    @db.Uuid
  product     Products? @relation(fields: [product_id], references: [id])
  product_id  String    @db.Uuid
  cartId      String?   @db.Uuid
}

model Wishlist {
  id     String         @id @default(uuid()) @db.Uuid
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique @db.Uuid
  items  WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(uuid()) @db.Uuid
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String   @db.Uuid
  product    Products @relation(fields: [productId], references: [id])
  productId  String   @db.Uuid
}

model Google {
  id       String @id @default(uuid()) @db.Uuid
  username String
  googleID String @unique
}
