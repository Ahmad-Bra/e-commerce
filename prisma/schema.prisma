// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
   binaryTargets = ["windows", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  email      String     @unique
  name       String
  password   String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  comments   Comments[]
  wishlists  Wishlist?
  cart       Cart?
}

model Products {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  slug         String
  price        Float
  currency     String
  discount     Float
  info         Info
  cpu_info     Cpu_Info
  in_stock     Int            @default(0)
  rating       Float
  comments     Comments[]
  brand        Brand          @relation(fields: [brandId], references: [id])
  category     Category       @relation(fields: [categoryId], references: [id])
  brandId      String         @db.ObjectId
  categoryId   String         @db.ObjectId
  images       String[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique @db.ObjectId
  items  CartItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  products    Products[]
}

model Brand {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  created_at  DateTime   @default(now())
  updated_at  DateTime   @default(now())
  products    Products[]
}

model Comments {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  rating      Float
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  author      User      @relation(fields: [author_id], references: [id])
  author_id   String    @db.ObjectId
  product     Products? @relation(fields: [product_id], references: [id])
  product_id  String    @db.ObjectId
  cartId      String?   @db.ObjectId
}

model Wishlist {
  id     String         @id @default(auto()) @map("_id") @db.ObjectId
  user   User           @relation(fields: [userId], references: [id])
  userId String         @unique @db.ObjectId
  items  WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String   @db.ObjectId
  product    Products @relation(fields: [productId], references: [id])
  productId  String   @db.ObjectId
}

model Google {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  googleID String @unique
}

type Info {
  weight String
  color  String
}

type Cpu_Info {
  model   String
  cores   Int
  threads Int
}
